{"version":3,"sources":["webpack:///./src/pages/guides.js"],"names":["randomColor","h","Math","random","s","v","h_i","parseInt","f","p","q","t","g","b","hsv_to_rgb","Guides","posts","data","allMarkdownRemark","edges","className","map","post","to","node","frontmatter","slug","key","id","style","color","backgroundColor","title"],"mappings":"6FAAA,wDA6BMA,EAAc,WAClB,IACIC,EAAIC,KAAKC,SACbF,GAF+B,iBADP,MAxBP,SAACA,EAAGG,EAAGC,GACxB,IAAMC,EAAMC,SAAa,EAAJN,GACfO,EAAQ,EAAJP,EAAQK,EACZG,EAAIJ,GAAK,EAAID,GACbM,EAAIL,GAAK,EAAIG,EAAIJ,GACjBO,EAAIN,GAAK,GAAK,EAAIG,GAAKJ,GALC,EAOlB,IAARE,EACO,CAACD,EAAGM,EAAGF,GACC,IAARH,EACA,CAACI,EAAGL,EAAGI,GACC,IAARH,EACA,CAACG,EAAGJ,EAAGM,GACC,IAARL,EACA,CAACG,EAAGC,EAAGL,GACC,IAARC,EACA,CAACK,EAAGF,EAAGJ,GAEP,CAACA,EAAGI,EAAGC,GAERE,EApBoB,KAoBjBC,EApBiB,KAqB9B,MAAO,CAACN,SAAa,IArBS,MAqBHA,SAAa,IAAJK,GAAUL,SAAa,IAAJM,IAQrCC,CADlBb,GAAK,EAC2B,GAAK,KACrC,OANwB,KAMxB,KANwB,KAMxB,KANwB,MAsCXc,UAvBA,SAAC,GAAc,IACtBC,EADqB,EAAXC,KACGC,kBAAkBC,MACrC,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,QACb,sCACA,yBAAKA,UAAU,cACZJ,EAAMK,KAAI,SAAAC,GAAI,OACb,kBAAC,OAAD,CAAMC,GAAID,EAAKE,KAAKC,YAAYC,MAC9B,yBAAKC,IAAKL,EAAKE,KAAKI,GAAIR,UAAU,SAChC,yBAAKA,UAAU,YAAYS,OAhB7BC,EAgB0C9B,IAf/C,CACL+B,gBAAgB,OAAQD,EAAT,QAeH,yBAAKV,UAAU,iBACb,4BAAKE,EAAKE,KAAKC,YAAYO,OAC3B,yBAAKZ,UAAU,eAnBnB,IAAAU","file":"component---src-pages-guides-js-abe3fffe71eab7fec016.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/\"\n\nconst hsv_to_rgb = (h, s, v) => {\n  const h_i = parseInt(h * 6)\n  const f = h * 6 - h_i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  let result = []\n  if (h_i === 0) {\n    result = [v, t, p]\n  } else if (h_i === 1) {\n    result = [q, v, p]\n  } else if (h_i === 2) {\n    result = [p, v, t]\n  } else if (h_i === 3) {\n    result = [p, q, v]\n  } else if (h_i === 4) {\n    result = [t, p, v]\n  } else {\n    result = [v, p, q]\n  }\n  const [r, g, b] = result\n  return [parseInt(r * 256), parseInt(g * 256), parseInt(b * 256)]\n}\n\nconst randomColor = () => {\n  const golden_ratio_conjugate = 0.618033988749895\n  let h = Math.random()\n  h += golden_ratio_conjugate\n  h %= 1\n  const [r, g, b] = hsv_to_rgb(h, 0.5, 0.95)\n  return `${r}, ${g}, ${b}`\n}\n\nconst style = color => {\n  return {\n    backgroundColor: `rgb(${color})`,\n  }\n}\n\nconst Guides = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges\n  return (\n    <Layout>\n      <div className=\"page\">\n        <h1>Guides</h1>\n        <div className=\"guide-list\">\n          {posts.map(post => (\n            <Link to={post.node.frontmatter.slug}>\n              <div key={post.node.id} className=\"guide\">\n                <div className=\"thumbnail\" style={style(randomColor())}></div>\n                <div className=\"guide-content\">\n                  <h2>{post.node.frontmatter.title}</h2>\n                  <div className=\"excerpt\"></div>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\nexport default Guides\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}