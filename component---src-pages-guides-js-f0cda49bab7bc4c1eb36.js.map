{"version":3,"sources":["webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/footer.js","webpack:///./src/components/sidebar.js","webpack:///./src/pages/guides.js"],"names":["Header","siteTitle","menuLinks","className","to","map","link","key","name","activeClassName","header_links","defaultProps","Layout","children","data","useStaticQuery","site","siteMetadata","title","Footer","Date","getFullYear","Sidebar","links","item","idx","href","randomColor","h","Math","random","s","v","h_i","parseInt","f","p","q","t","g","b","hsv_to_rgb","Guides","posts","allMarkdownRemark","edges","post","node","frontmatter","slug","id","style","color","backgroundColor"],"mappings":"iSAqBMA,G,oBAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,UAAd,OACb,4BAAQC,UAAU,UAChB,+BAAQF,GACR,6BACE,6BACE,wBAAIE,UAAU,cACZ,kBAAC,OAAD,CAAMC,GAAG,KAAKH,IAEhB,6BAtBa,SAAAC,GACnB,OACE,4BACGA,EAAUG,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,EAAKE,KAAML,UAAU,QAC5B,kBAAC,OAAD,CAAMC,GAAIE,EAAKA,KAAMG,gBAAgB,UAClCH,EAAKE,WAgBJE,CAAaR,SAU3BF,EAAOW,aAAe,CACpBV,UAAU,IAGGD,QCAAY,EAnCA,SAAC,GAAkB,IAAD,IAAfC,EAAe,EAAfA,SACVC,EAAOC,yBAAe,cAc5B,OACE,oCACE,yBAAKZ,UAAU,QACb,kBAAC,EAAD,CACEF,WAAW,UAAAa,EAAKE,KAAKC,oBAAV,eAAwBC,QAAxB,QACXhB,UAAS,UAAEY,EAAKE,KAAKC,oBAAZ,aAAE,EAAwBf,YAErC,yBAAKC,UAAU,gBACb,8BAAOU,IAET,kBAAC,EAAD,SCnBOM,EAXA,WACb,OACE,yBAAKhB,UAAU,UACb,sCACK,IAAIiB,MAAOC,cADhB,iCAC6D,IAC3D,kBAAC,OAAD,CAAMjB,GAAG,eAAT,mBCgBOkB,EArBC,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACjB,OACE,yBAAKpB,UAAU,WAEb,yBAAKA,UAAU,iBACZoB,EAAMlB,KAAI,SAACmB,EAAMC,GAAP,OACT,yBAAKlB,IAAKkB,EAAM,IACd,uBAAGC,KAAMF,EAAKlB,KAAMC,IAAKkB,GACtBD,EAAKhB,c,oCCXpB,wDA6BMmB,EAAc,WAClB,IACIC,EAAIC,KAAKC,SACbF,GAF+B,iBADP,MAxBP,SAACA,EAAGG,EAAGC,GACxB,IAAMC,EAAMC,SAAa,EAAJN,GACfO,EAAQ,EAAJP,EAAQK,EACZG,EAAIJ,GAAK,EAAID,GACbM,EAAIL,GAAK,EAAIG,EAAIJ,GACjBO,EAAIN,GAAK,GAAK,EAAIG,GAAKJ,GALC,EAOlB,IAARE,EACO,CAACD,EAAGM,EAAGF,GACC,IAARH,EACA,CAACI,EAAGL,EAAGI,GACC,IAARH,EACA,CAACG,EAAGJ,EAAGM,GACC,IAARL,EACA,CAACG,EAAGC,EAAGL,GACC,IAARC,EACA,CAACK,EAAGF,EAAGJ,GAEP,CAACA,EAAGI,EAAGC,GAERE,EApBoB,KAoBjBC,EApBiB,KAqB9B,MAAO,CAACN,SAAa,IArBS,MAqBHA,SAAa,IAAJK,GAAUL,SAAa,IAAJM,IAQrCC,CADlBb,GAAK,EAC2B,GAAK,KACrC,OANwB,KAMxB,KANwB,KAMxB,KANwB,MAsCXc,UAvBA,SAAC,GAAc,IACtBC,EADqB,EAAX7B,KACG8B,kBAAkBC,MACrC,OACE,kBAAC,IAAD,KACE,yBAAK1C,UAAU,QACb,sCACA,yBAAKA,UAAU,cACZwC,EAAMtC,KAAI,SAAAyC,GAAI,OACb,kBAAC,OAAD,CAAM1C,GAAI0C,EAAKC,KAAKC,YAAYC,MAC9B,yBAAK1C,IAAKuC,EAAKC,KAAKG,GAAI/C,UAAU,SAChC,yBAAKA,UAAU,YAAYgD,OAhB7BC,EAgB0CzB,IAf/C,CACL0B,gBAAgB,OAAQD,EAAT,QAeH,yBAAKjD,UAAU,iBACb,4BAAK2C,EAAKC,KAAKC,YAAY9B,OAC3B,yBAAKf,UAAU,eAnBnB,IAAAiD,U","file":"component---src-pages-guides-js-f0cda49bab7bc4c1eb36.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\n\nimport \"normalize.css\"\nimport \"../styles/styles.scss\"\n\nconst header_links = menuLinks => {\n  return (\n    <ul>\n      {menuLinks.map(link => (\n        <li key={link.name} className=\"link\">\n          <Link to={link.link} activeClassName=\"active\">\n            {link.name}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nconst Header = ({ siteTitle, menuLinks }) => (\n  <header className=\"header\">\n    <title>{siteTitle}</title>\n    <div>\n      <div>\n        <h1 className=\"site-title\">\n          <Link to=\"/\">{siteTitle}</Link>\n        </h1>\n        <div>{header_links(menuLinks)}</div>\n      </div>\n    </div>\n  </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport \"normalize.css\"\n\nimport { Header, Footer } from \"./\"\nimport \"../styles/styles.scss\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n          menuLinks {\n            name\n            link\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <div className=\"site\">\n        <Header\n          siteTitle={data.site.siteMetadata?.title || `Title`}\n          menuLinks={data.site.siteMetadata?.menuLinks}\n        />\n        <div className=\"site-content\">\n          <main>{children}</main>\n        </div>\n        <Footer />\n      </div>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <footer>\n        © {new Date().getFullYear()} - Team110 - Chapel Hill, NC —{\" \"}\n        <Link to=\"/contribute\">how to edit!</Link>\n      </footer>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Sidebar = ({ links }) => {\n  return (\n    <div className=\"sidebar\">\n      {/* <h3>Overview</h3> */}\n      <div className=\"sidebar-links\">\n        {links.map((item, idx) => (\n          <div key={idx + 20}>\n            <a href={item.link} key={idx}>\n              {item.name}\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nSidebar.propTypes = {\n  links: PropTypes.array,\n}\n\nexport default Sidebar\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport { Layout } from \"../components/\"\n\nconst hsv_to_rgb = (h, s, v) => {\n  const h_i = parseInt(h * 6)\n  const f = h * 6 - h_i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  let result = []\n  if (h_i === 0) {\n    result = [v, t, p]\n  } else if (h_i === 1) {\n    result = [q, v, p]\n  } else if (h_i === 2) {\n    result = [p, v, t]\n  } else if (h_i === 3) {\n    result = [p, q, v]\n  } else if (h_i === 4) {\n    result = [t, p, v]\n  } else {\n    result = [v, p, q]\n  }\n  const [r, g, b] = result\n  return [parseInt(r * 256), parseInt(g * 256), parseInt(b * 256)]\n}\n\nconst randomColor = () => {\n  const golden_ratio_conjugate = 0.618033988749895\n  let h = Math.random()\n  h += golden_ratio_conjugate\n  h %= 1\n  const [r, g, b] = hsv_to_rgb(h, 0.5, 0.95)\n  return `${r}, ${g}, ${b}`\n}\n\nconst style = color => {\n  return {\n    backgroundColor: `rgb(${color})`,\n  }\n}\n\nconst Guides = ({ data }) => {\n  const posts = data.allMarkdownRemark.edges\n  return (\n    <Layout>\n      <div className=\"page\">\n        <h1>Guides</h1>\n        <div className=\"guide-list\">\n          {posts.map(post => (\n            <Link to={post.node.frontmatter.slug}>\n              <div key={post.node.id} className=\"guide\">\n                <div className=\"thumbnail\" style={style(randomColor())}></div>\n                <div className=\"guide-content\">\n                  <h2>{post.node.frontmatter.title}</h2>\n                  <div className=\"excerpt\"></div>\n                </div>\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </Layout>\n  )\n}\nexport default Guides\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}